name: Selenium and Rest Assured Tests on EC2

# Trigger the workflow on push or pull request events to the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define the job
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Start EC2 instance
      - name: Start EC2 instance
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}

      # Get EC2 public IP
      - name: Get EC2 public IP
        id: get-ip
        run: |
          IP=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          echo "ip=$IP" >> $GITHUB_OUTPUT

      # Set up SSH key
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      # Upload project to EC2
      - name: Upload project to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i key.pem -r . ${{ secrets.EC2_USER }}@${{ steps.get-ip.outputs.ip }}:/home/${{ secrets.EC2_USER }}/project

      # Run tests on EC2 and clean up
      - name: Run Selenium and Rest Assured Tests on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ steps.get-ip.outputs.ip }} << EOF
            # Clean up existing Chrome/Chromedriver processes
            pkill -9 chrome || true
            pkill -9 chromedriver || true
            # Clean up temporary Chrome directories
            rm -rf /tmp/.com.google.Chrome* ~/.cache/google-chrome
            # Run tests with unique user-data-dir
            cd /home/${{ secrets.EC2_USER }}/project
            mvn test -Dselenide.headless=true -Dselenide.chromeoptions="--no-sandbox,--disable-dev-shm-usage,--user-data-dir=/tmp/chrome-\$(date +%s)"
          EOF

      # Download test results from EC2
      - name: Download test results from EC2
        run: |
          mkdir -p results
          scp -o StrictHostKeyChecking=no -i key.pem -r ${{ secrets.EC2_USER }}@${{ steps.get-ip.outputs.ip }}:/home/${{ secrets.EC2_USER }}/project/target/surefire-reports/* results/

      # Upload test results as artifact
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: results/

      # Clean up files on EC2
      - name: Clean up files on EC2
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_USER }}@${{ steps.get-ip.outputs.ip }} << EOF
            rm -rf /home/${{ secrets.EC2_USER }}/project
          EOF

      # Stop EC2 instance
      - name: Stop EC2 instance
        if: always()
        run: |
          aws ec2 stop-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          aws ec2 wait instance-stopped --instance-ids ${{ secrets.EC2_INSTANCE_ID }}

      # Clean up local SSH key
      - name: Clean up local SSH key
        if: always()
        run: rm -f key.pem